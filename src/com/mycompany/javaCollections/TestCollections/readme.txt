Сравнение производительности коллекций в Java:

Размер коллекции - 100.000 элементов

1) ArrayList / LinkedList:
Добавление:
В начало:162.128.200 / 1.374.700
В середину: 51.561.100 / 1.504.043.300
В конец: 17.943.900 / 566.022.600
Удаление:
Из начала: 122.922.100 / 53.884.100
Из середины: 48.164.100 / 1.366.763.100
Из конца: 7.697.700 / 185.840.400

Вывод:
- Добавлять и удалять элементы из начала списка быстрее с помощью LinkedList
- Добавлять и удалять элементы из середины и конца быстрее с помощью ArrayList
Удаление с конца теоретически быстрее с помощью LinkedList, но для того, чтобы
увидеть это на практике необходима большая выборка.
Это объясняется тем, что ArrayList - список на основе массива, а LinkedList -
- связный список на основе элементов и связей между ними, имеющий быстрый доступ 
к первому и последнему элементу.

2) HashSet / LinkedHashSet / TreeSet:
Добавление: 
29.779.800 / 20.084.700 / 28.062.000
Поиск: 
14.561.700 / 28.346.800 / 18.443.200
Удаление: 
12.011.600 / 16.120.800 / 21.654.300

Вывод:
- Для добавления элементов наиболее удобен LinkedHashSet
- Для поиска элементов предпочтительнее HashSet
- Для удаления элемента предпочтительнее HashSet, но разница с LinkedHashSet небольшая
- TreeSet уступает первым двум коллекция по всем показателям

3) HashMap / LinkedHashMap / TreeMap:
Добавление:
19.393.000 / 20.562.300 / 37.971.100
Поиск:
10.077.600 / 4.612.500 / 15.054.200
Удаление:
11.224.700 / 6.295.100 / 7.441.800

Вывод:
- Для добавления элементов практически одинаково удобны HashMap и LinkedHashMap
- Поиск и удаление элементов быстрее при использовании LinkedHashMap
- TreeMap заметно уступает двум первым коллекциям при добавлении элементов, 
при поиске и удалении разница меньше 
